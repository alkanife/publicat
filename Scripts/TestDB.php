<?php
/**
 * CLI Tool
 *
 * This script will test every model and connections to the database.
 * It does not check the values returned by the database, but the validity of the SQL queries
 *
 * It is best to use an empty, fresh database generated by db.sql
 */

// Database constants
const DB_HOST = 'localhost';
const DB_NAME = 'publicat_tests';
const DB_USER = 'root';
const DB_PASS = '';
const DB_TABLE_PREFIX = 'p0bl1_';

// Use script utils
require_once 'ScriptUtils.php';
clear();

// Imports
use Publicat\Model\User\UserFollows;
use Publicat\Model\User\Users;

// Start
printrl(COLOR_BLACK_BRIGHT . '------------------------------');
printrl(COLOR_WHITE_BOLD . 'Publicat Database Testing Tool');
printrl(COLOR_BLACK_BRIGHT . '------------------------------');

// Read arguments
// Passing the '-y' argument will not show the warning message
$bypassWarning = false;

if (!empty($argv[1])) {
    if ($argv[1] == '-y') {
        $bypassWarning = true;
    }
}

if (!$bypassWarning) {
    printrl(COLOR_YELLOW . 'This tool must be used on an empty database, do you really want to use the "' . DB_NAME . '" database?' . PHP_EOL . 'Press "yes" to continue');

    // Read user input
    $handle = fopen("php://stdin", "r");
    $line = fgets($handle);

    if (trim($line) != 'yes') {
        printrl(COLOR_RED . 'Aborting');
        exit;
    }

    fclose($handle);
}

// Require models
require_once '../Website/model/Model.php';

require_once '../Website/model/user/Users.php';
require_once '../Website/model/user/UserFollows.php';
require_once '../Website/model/user/UserLikes.php';

require_once '../Website/model/work/ContentRatings.php';
require_once '../Website/model/work/Documents.php';
require_once '../Website/model/work/Works.php';
require_once '../Website/model/work/WorkTags.php';

// Run tests
$test = new TestDB();
$test->run();

class TestDB {
    private mixed $programStartTime;
    private mixed $functionStartTime;

    private int $index = 1;

    public function run(): void {
        $this->programStartTime = $this->getCurrentTime();
        $this->functionStartTime = $this->getCurrentTime();

        echo PHP_EOL;

        $userModel = new Users();
        $email = $this->generateRandomString(20) . '@' . $this->generateRandomString(20) . '.com';
        $username = 'test.' . $this->generateRandomString(15);

        $this->beginFunction('Users', 'create');
        $userModel->create($email, $username, 'TestP@ssw0rd');
        $this->endFunction();

        $this->beginFunction('Users', 'getByUsername');
        $id = $userModel->getByUsername($username, true)['id'];
        $this->endFunction();

        $this->beginFunction('Users', 'getById');
        $userModel->getById($id, true);
        $this->endFunction();

        $this->beginFunction('Users', 'getByEmail');
        $userModel->getByEmail($email, true);
        $this->endFunction();

        $this->beginFunction('Users', 'getProfile');
        $userModel->getProfile($username);
        $this->endFunction();

        $this->beginFunction('Users', 'getPasswordByEmail');
        $userModel->getPasswordByEmail($email);
        $this->endFunction();

        $this->beginFunction('Users', 'isUsernameTaken');
        $userModel->isUsernameTaken($username);
        $this->endFunction();

        $this->beginFunction('Users', 'isEmailTaken');
        $userModel->isEmailTaken($email);
        $this->endFunction();

        $this->beginFunction('Users', 'updateById');
        $userModel->updateById($id, ['aboutMe' => $this->generateRandomString(150)]);
        $this->endFunction();

        $this->beginFunction('Users', 'updateRole');
        $userModel->updateRole($id, 'member');
        $this->endFunction();

        $userFollowsModel = new UserFollows();

        $this->beginFunction('UserFollows', 'isFollowing');
        $userFollowsModel->isFollowing($id, $username);
        $this->endFunction();

        $this->beginFunction('UserFollows', 'follow');
        $userFollowsModel->follow($id, $username);
        $this->endFunction();

        $this->beginFunction('UserFollows', 'unfollow');
        $userFollowsModel->unfollow($id, $username);
        $this->endFunction();

        $this->beginFunction('Users', 'deleteById');
        $userModel->deleteById($id);
        $this->endFunction();

        echo PHP_EOL;
        printrl(COLOR_BLACK_BRIGHT . '------------------------------');
        printrl(COLOR_GREEN . 'Total time: ' . $this->handleProgramTime());
        echo PHP_EOL;
    }

    private function beginFunction(string $model, string $functionName): void {
        echo COLOR_BLACK_BRIGHT . '[' . COLOR_RESET . $this->index . COLOR_BLACK_BRIGHT . '] Testing ';
        echo COLOR_CYAN . $model . COLOR_BLACK_BRIGHT . '->' . COLOR_YELLOW_BRIGHT . $functionName . COLOR_BLACK_BRIGHT . '()...';

        $this->index++;
    }

    private function endFunction(): void {
        echo COLOR_BLACK_BRIGHT . ' Done (' . $this->handleFunctionTime() . COLOR_BLACK_BRIGHT . ')' . PHP_EOL;
    }

    private function handleProgramTime(): string {
        $diffInSeconds = number_format(($this->getCurrentTime() - $this->programStartTime), 5);
        return $diffInSeconds . ' seconds';
    }

    private function handleFunctionTime(): string {
        $currentTime = $this->getCurrentTime();
        $diffInSeconds = number_format(($currentTime - $this->functionStartTime), 5);

        $this->functionStartTime = $currentTime;

        return COLOR_GREEN . $diffInSeconds . COLOR_BLACK_BRIGHT . ' seconds';
    }

    private function getCurrentTime(): float {
        return microtime(true);
    }

    /**
     * Generate random string
     *
     * @param int $length String length
     * @return string Random string
     */
    private function generateRandomString(int $length = 10): string {
        try {
            $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            $charactersLength = strlen($characters);
            $randomString = '';

            for ($i = 0; $i < $length; $i++) {
                $randomString .= $characters[random_int(0, $charactersLength - 1)];
            }

            return $randomString;
        } catch (Throwable $t) {
            return '';
        }
    }
}